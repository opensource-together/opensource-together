name: ost

services:
  server:
    build:
      context: ../server
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - CONNECTION_URI=${CONNECTION_URI:-http://supertokens:3567}
      - DATABASE_URL=postgresql://${BUSINESS_DB_USER:-business_user}:${BUSINESS_DB_PASSWORD:-business_password}@postgres:5432/${BUSINESS_DB_NAME:-business}
      - APP_NAME=${APP_NAME:-OST}
      - WEBSITE_DOMAIN=${WEBSITE_DOMAIN:-http://localhost}
      - API_DOMAIN=${API_DOMAIN:-http://localhost}
      - COOKIE_DOMAIN=${COOKIE_DOMAIN:-localhost}
      - SUPERTOKENS_API_KEY=${SUPERTOKENS_API_KEY}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - RESEND_API_KEY=${RESEND_API_KEY}
      - RESEND_FROM=${RESEND_FROM}
      - R2_ACCESS_KEY_ID=${R2_ACCESS_KEY_ID}
      - R2_SECRET_ACCESS_KEY=${R2_SECRET_ACCESS_KEY}
      - R2_BUCKET_NAME=${R2_BUCKET_NAME}
      - R2_ENDPOINT=${R2_ENDPOINT}
      - R2_URL=${R2_URL}
      - GH_TOKEN_OST_PUBLIC=${GH_TOKEN_OST_PUBLIC}

    ports:
      - "${API_PORT:-4000}:3000"
    networks:
      - app_network
    depends_on:
      postgres:
        condition: service_healthy
      supertokens:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/v1/health || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5

  supertokens:
    image: registry.supertokens.io/supertokens/supertokens-postgresql:10.1.0
    restart: unless-stopped
    environment:
      - POSTGRESQL_CONNECTION_URI=postgresql://${SUPERTOKENS_DB_USER:-supertokens_user}:${SUPERTOKENS_DB_PASSWORD:-supertokens_password}@postgres:5432/${SUPERTOKENS_DB_NAME:-supertokens}
    ports:
      - "${SUPERTOKENS_EXT_PORT:-3567}:3567"
    networks:
      - app_network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: >
        bash -c 'exec 3<>/dev/tcp/127.0.0.1/3567 && echo -e "GET /hello HTTP/1.1\r\nhost: 127.0.0.1:3567\r\nConnection: close\r\n\r\n" >&3 && cat <&3 | grep "Hello"'
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:17
    restart: unless-stopped
    environment:
      # Postgres
      - POSTGRES_DB=${POSTGRES_NAME:-postgres}
      - POSTGRES_USER=${POSTGRES_USER:-postgres_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres_password}
      # Business DB
      - BUSINESS_DB_NAME=${BUSINESS_DB_NAME:-business}
      - BUSINESS_DB_USER=${BUSINESS_DB_USER:-business_user}
      - BUSINESS_DB_PASSWORD=${BUSINESS_DB_PASSWORD:-business_password}
      # SuperTokens DB
      - SUPERTOKENS_DB_NAME=${SUPERTOKENS_DB_NAME:-supertokens}
      - SUPERTOKENS_DB_USER=${SUPERTOKENS_DB_USER:-supertokens_user}
      - SUPERTOKENS_DB_PASSWORD=${SUPERTOKENS_DB_PASSWORD:-supertokens_password}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../../deploy/docker/init:/docker-entrypoint-initdb.d
    networks:
      - app_network
    healthcheck:
      test: [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-postgres_user} -d ${POSTGRES_NAME:-postgres} && \
          psql -U ${POSTGRES_USER:-postgres_user} -d ${POSTGRES_NAME:-postgres} -tAc \"SELECT 1 FROM pg_database WHERE datname = '${SUPERTOKENS_DB_NAME:-supertokens}'\" | grep -q 1 && \
          psql -U ${POSTGRES_USER:-postgres_user} -d ${POSTGRES_NAME:-postgres} -tAc \"SELECT 1 FROM pg_database WHERE datname = '${BUSINESS_DB_NAME:-business}'\" | grep -q 1",
        ]
      interval: 5s
      timeout: 5s
      retries: 5

  migrate:
    build:
      context: ../server
      dockerfile: Dockerfile
    restart: no
    command:
      [
        "npx",
        "prisma",
        "db",
        "push",
        "--schema=/app/schema/schema.prisma",
        "--skip-generate",
        "--force-reset",
      ]
    environment:
      - DATABASE_URL=postgresql://${BUSINESS_DB_USER:-business_user}:${BUSINESS_DB_PASSWORD:-business_password}@postgres:5432/${BUSINESS_DB_NAME:-business}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app_network

volumes:
  postgres_data:

networks:
  app_network:
    driver: bridge
