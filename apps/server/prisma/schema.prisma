// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProjectRoleApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum SocialLinkType {
  GITHUB
  TWITTER
  LINKEDIN
  WEBSITE
}

enum TechStackType {
  LANGUAGE
  TECH
}

model User {
  id            String   @id @default(uuid())
  name          String?
  githubLogin   String?
  email         String   @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  sessions       Session[]
  accounts       Account[]
  Profile        Profile[]
  Project        Project[]
  TechStack      TechStack?       @relation(fields: [techStackId], references: [id])
  techStackId    String?
  teamMember     TeamMember[]
  UserSocialLink UserSocialLink[]
  GitHubStats    GitHubStats?

  applicationsApplied ProjectRoleApplication[] @relation("applier")
  applicationsDecided ProjectRoleApplication[] @relation("decider")

  notificationsSent     Notification[] @relation("NotificationsSent")
  notificationsReceived Notification[] @relation("NotificationsReceived")

  @@map("user")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Session {
  id        String   @id
  userId    String
  token     String
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map("account")
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  bio       String?
  location  String?
  company   String?
  jobTitle  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profile")
}

model Project {
  id                     String                   @id @default(uuid())
  ownerId                String
  title                  String
  description            String
  externalLinks          ProjectExternalLink[]
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  techStacks             TechStack[]
  keyFeature             KeyFeature[]
  projectMembers         TeamMember[]
  projectRoles           ProjectRole[]
  categories             Category[]
  projectRoleApplication ProjectRoleApplication[]
  owner                  User                     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  image                  String?
  coverImages            String[]
  readme                 String?

  @@index([createdAt(sort: Desc)], name: "idx_project_date")
  @@index([title], name: "idx_title_search")
}

model ProjectExternalLink {
  id        String  @id @default(uuid())
  projectId String
  type      String
  url       String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model TechStack {
  id           String        @id @default(uuid())
  name         String
  iconUrl      String
  type         TechStackType
  projects     Project[]
  projectRoles ProjectRole[]
  users        User[]
}

model TeamMember {
  id          String        @id @default(uuid())
  userId      String
  projectId   String
  joinedAt    DateTime      @default(now())
  projectRole ProjectRole[]

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProjectRole {
  id                     String                   @id @default(uuid())
  projectId              String
  title                  String
  techStacks             TechStack[]
  description            String
  isFilled               Boolean
  teamMember             TeamMember[]
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  projectRoleApplication ProjectRoleApplication[]

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId, title], name: "idx_project_roles")
}

model ProjectRoleApplication {
  id               String                       @id @default(uuid())
  userId           String
  projectId        String
  projectRoleId    String
  keyFeatureId     String
  status           ProjectRoleApplicationStatus
  motivationLetter String?
  rejectionReason  String?
  decidedAt        DateTime?                    @updatedAt
  decidedBy        String?
  createdAt        DateTime                     @default(now())
  updatedAt        DateTime                     @updatedAt

  projectRole ProjectRole @relation(fields: [projectRoleId], references: [id], onDelete: Cascade)
  user        User        @relation("applier", fields: [userId], references: [id], onDelete: Cascade)
  userDecider User?       @relation("decider", fields: [decidedBy], references: [id], onDelete: SetNull)
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  keyFeature  KeyFeature  @relation(fields: [keyFeatureId], references: [id], onDelete: Cascade)
}

model KeyFeature {
  id                     String                   @id @default(uuid())
  projectId              String
  feature                String
  project                Project                  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  ProjectRoleApplication ProjectRoleApplication[]

  @@unique([projectId, feature])
}

model UserSocialLink {
  id        String         @id @default(uuid())
  userId    String
  type      SocialLinkType
  url       String
  createdAt DateTime       @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
}

model Category {
  id       String    @id @default(uuid())
  name     String
  projects Project[]
}

model GitHubStats {
  id                String   @id @default(uuid())
  userId            String   @unique
  totalStars        Int      @default(0)
  contributedRepos  Int      @default(0)
  commitsThisYear   Int      @default(0)
  contributionGraph Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id         String    @id @default(uuid())
  object     String
  senderId   String
  receiverId String
  type       String
  payload    Json
  createdAt  DateTime  @default(now())
  readAt     DateTime?

  sender   User @relation("NotificationsSent", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("NotificationsReceived", fields: [receiverId], references: [id], onDelete: Cascade)

  @@index([receiverId, readAt, createdAt(sort: Desc)], name: "idx_receiver_unread_notifications")
  @@index([senderId, createdAt(sort: Desc)], name: "idx_sender_notifications")
  @@index([type, createdAt(sort: Desc)], name: "idx_notification_type")
}
