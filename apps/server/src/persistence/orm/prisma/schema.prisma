// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl-arm64-openssl-3.0.x"]
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id                String                 @id @default(uuid())
  username          String                 @unique
  email             String                 @unique
	jobTitle					String?
  // name              String
  provider          String                 @default("email")
  login             String
  avatarUrl         String?
  location          String?
  company           String?
  bio               String?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  githubCredentials UserGitHubCredentials?
  githubStats       GitHubStats?
  techStacks        TechStack[]
  socialLinks       UserSocialLink[]
  projects          Project[]
  projectRoleApplication ProjectRoleApplication[]
  teamMembers       teamMember[]
}

model UserGitHubCredentials {
  user              User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String   @id @unique
  githubAccessToken String?
  githubUserId      String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Project {
  id               String                @id @default(uuid())
  ownerId          String
  title            String
  description      String
  shortDescription String // ADDED
  externalLinks    ProjectExternalLink[]
  createdAt        DateTime              @default(now()) // RENAMED
  updatedAt        DateTime              @updatedAt
  techStacks       TechStack[]
  projectMembers   teamMember[]
  projectRoles     ProjectRole[]
  categories       Category[]
  keyFeatures      KeyFeature[]
  projectGoals     ProjectGoal[]
  projectRoleApplication ProjectRoleApplication[]
  owner           User                 @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  image            String?
  coverImages      String[]              // Array of cover image URLs (1 to 4)
  readme           String?
  // Index composite pour recherche + tri par date
  @@index([createdAt(sort: Desc)], name: "idx_project_date")
  // Index pour recherche textuelle sur le titre
  @@index([title], name: "idx_title_search")
}

model ProjectExternalLink {
  id        String  @id @default(uuid())
  projectId String
  type      String
  url       String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

enum TechStackType {
  LANGUAGE
  TECH
}

model TechStack {
  id           String        @id @default(uuid())
  name         String
  iconUrl      String
  type         TechStackType
  projects     Project[]
  projectRoles ProjectRole[]
  users        User[]
}

model teamMember {
  id          String        @id @default(uuid())
  userId      String
  projectId   String
  joinedAt    DateTime      @default(now())
  projectRole ProjectRole[]
  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProjectRole {
  id          String       @id @default(uuid())
  projectId   String
  title       String // RENAMED
  techStacks  TechStack[] // RENAMED
  description String
  isFilled    Boolean
  teamMember  teamMember[]
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  projectRoleApplication ProjectRoleApplication[]
  // Index pour recherche par projet et rôle
  @@index([projectId, title], name: "idx_project_roles") // UPDATED
}

model ProjectRoleApplication {
  id            String       @id @default(uuid())
  projectId     String
  projectTitle  String       // On garde pour l'historique
  projectRoleId String
  projectRoleTitle String     // On garde pour l'historique
  projectDescription String?  // Nouveau champ pour la description du projet
  status        String
  motivationLetter String?
  selectedKeyFeatures KeyFeature[] @relation("ProjectRoleApplicationKeyFeature")
  selectedProjectGoals ProjectGoal[] @relation("ProjectRoleApplicationProjectGoal")
  rejectionReason String?
  decidedAt     DateTime?    @updatedAt// Date de décision (acceptation/rejet)
  decidedBy     String?      // ID de l'utilisateur qui a pris la décision
  appliedAt DateTime @default(now())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  projectRole   ProjectRole  @relation(fields: [projectRoleId], references: [id], onDelete: Cascade)
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  project       Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model UserSocialLink {
  id        String   @id @default(uuid())
  userId    String
  type      String // ex: "github", "twitter", "linkedin", "website"
  url       String
  createdAt DateTime @default(now())

  // Relation
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Un utilisateur ne peut avoir qu'un seul lien d'un type donné.
  @@unique([userId, type])
}

model Category {
  id       String    @id @default(uuid())
  name     String
  projects Project[]
}

model KeyFeature {
  id        String  @id @default(uuid())
  projectId String
  feature   String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  ProjectRoleApplication ProjectRoleApplication[] @relation("ProjectRoleApplicationKeyFeature")
}

model ProjectGoal {
  id        String  @id @default(uuid())
  projectId String
  goal      String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  ProjectRoleApplication ProjectRoleApplication[] @relation("ProjectRoleApplicationProjectGoal")
}

model GitHubStats {
  id                String   @id @default(uuid())
  userId            String   @unique
  totalStars        Int      @default(0)
  contributedRepos  Int      @default(0)
  commitsThisYear   Int      @default(0)
  contributionGraph Json?    // Stockage du ContributionGraph en JSON
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relation vers User
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
