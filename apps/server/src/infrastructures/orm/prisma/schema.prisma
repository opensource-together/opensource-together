// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl-arm64-openssl-3.0.x"]
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id        					String   @id @default(uuid())
  username  					String   @unique
  email     					String   @unique
  createdAt 					DateTime @default(now())
  updatedAt 					DateTime @updatedAt
}

model Project {
  id          				String        	@id @default(uuid())
  ownerId     				String
  title       				String
  description 				String
	difficulty					Difficulty
  link        				String?
	github							String
	createAt						DateTime				@default(now())
	updatedAt						DateTime				@updatedAt
  techStacks  				TechStack[]
	projectMembers			teamMember[]
	projectRoles				ProjectRole[]
}

model TechStack {
  id       						String    @id @default(uuid())
  name     						String
  iconUrl  						String
  projects 						Project[]
}

model teamMember {
	id								String				@id @default(uuid())
	userId						String
	projectId					String
	projectRolesId		String[]
	jointedAt					DateTime			@default(now())
	projectRole				ProjectRole[]
	project						Project				@relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model ProjectRole {
	id									String		@id @default(uuid())
	projectId						String
	teamMembersId				String[]
	roleTitle						String
	skillSet						String[]
	description					String
	isFilled						Boolean
	teamMember					teamMember[]
	project							Project			@relation(fields: [projectId], references: [id], onDelete: Cascade)
}