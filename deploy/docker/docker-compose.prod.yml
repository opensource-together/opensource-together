name: ost

services:

  nginx:
    image: nginx:latest
    restart: unless-stopped
    ports:
      - "${GATEWAY_PORT:-80}:80"
    volumes:
      - ./nginx:/etc/nginx/conf.d
    networks:
      - app_network
    depends_on:
      web:
        condition: service_healthy
      server:
        condition: service_healthy
    labels:
      - traefik.enable=true
      - traefik.http.routers.nginx.rule=Host(${API_DOMAIN})
      - traefik.http.routers.nginx.entrypoints=https
      - traefik.http.routers.nginx.tls=true
      - traefik.http.routers.nginx.service=nginx-svc
      - traefik.http.services.nginx-svc.loadbalancer.server.port=80
      - traefik.http.services.nginx-svc.loadbalancer.server.scheme=http
  
  web:
    image: ghcr.io/opensource-together/web:${VERSION_TAG}
    restart: unless-stopped
    ports:
      - "${FRONT_PORT}:3000"
    networks:
      - app_network
    depends_on:
      server:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/ || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5

  server:
    image: ghcr.io/opensource-together/server:${VERSION_TAG}
    restart: unless-stopped
    environment:
      - CONNECTION_URI=http://supertokens:3567
      - DATABASE_URL=postgresql://${BUSINESS_DB_USER}:${BUSINESS_DB_PASSWORD}@postgres:5432/${BUSINESS_DB_NAME}
      - APP_NAME=${APP_NAME}
      - WEBSITE_DOMAIN=${WEBSITE_DOMAIN}
      - API_DOMAIN=${API_DOMAIN}
      - COOKIE_DOMAIN=${COOKIE_DOMAIN}
      - SUPERTOKENS_API_KEY=${SUPERTOKENS_API_KEY}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - RESEND_API_KEY=${RESEND_API_KEY}
      - RESEND_FROM=${RESEND_FROM}
      - R2_ACCESS_KEY_ID=${R2_ACCESS_KEY_ID}
      - R2_SECRET_ACCESS_KEY=${R2_SECRET_ACCESS_KEY}
      - R2_BUCKET_NAME=${R2_BUCKET_NAME}
      - R2_ENDPOINT=${R2_ENDPOINT}
      - R2_URL=${R2_URL}
      - GH_TOKEN_OST_PUBLIC=${GH_TOKEN_OST_PUBLIC}
    ports:
      - "${API_PORT}:3000"
    networks:
      - app_network
    depends_on:
      postgres:
        condition: service_healthy
      supertokens:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/v1/health || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5

  supertokens:
    image: registry.supertokens.io/supertokens/supertokens-postgresql:10.1.0
    restart: unless-stopped
    environment:
      - POSTGRESQL_CONNECTION_URI=postgresql://${SUPERTOKENS_DB_USER}:${SUPERTOKENS_DB_PASSWORD}@postgres:5432/${SUPERTOKENS_DB_NAME}
    ports:
      - "${SUPERTOKENS_EXT_PORT:-3567}:3567"
    networks:
      - app_network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: >
        bash -c 'exec 3<>/dev/tcp/127.0.0.1/3567 && echo -e "GET /hello HTTP/1.1\r\nhost: 127.0.0.1:3567\r\nConnection: close\r\n\r\n" >&3 && cat <&3 | grep "Hello"'
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:17
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_NAME}
      - BUSINESS_DB_NAME=${BUSINESS_DB_NAME}
      - BUSINESS_DB_USER=${BUSINESS_DB_USER}
      - BUSINESS_DB_PASSWORD=${BUSINESS_DB_PASSWORD}
      - SUPERTOKENS_DB_NAME=${SUPERTOKENS_DB_NAME}
      - SUPERTOKENS_DB_USER=${SUPERTOKENS_DB_USER}
      - SUPERTOKENS_DB_PASSWORD=${SUPERTOKENS_DB_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init:/docker-entrypoint-initdb.d
    networks:
      - app_network
    healthcheck:
      test: [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_NAME} && \
          psql -U ${POSTGRES_USER} -d ${POSTGRES_NAME} -tAc \"SELECT 1 FROM pg_database WHERE datname = '${SUPERTOKENS_DB_NAME}'\" | grep -q 1 && \
          psql -U ${POSTGRES_USER} -d ${POSTGRES_NAME} -tAc \"SELECT 1 FROM pg_database WHERE datname = '${BUSINESS_DB_NAME}'\" | grep -q 1",
        ]
      interval: 5s
      timeout: 5s
      retries: 5

  migrate:
    image: ghcr.io/opensource-together/server:${VERSION_TAG}
    restart: no
    command:
      [
        "npx",
        "prisma",
        "db",
        "push",
        "--schema=/app/schema/schema.prisma",
        "--skip-generate",
      ]
    environment:
      - DATABASE_URL=postgresql://${BUSINESS_DB_USER}:${BUSINESS_DB_PASSWORD}@postgres:5432/${BUSINESS_DB_NAME}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app_network

volumes:
  postgres_data:

networks:
  app_network:
    driver: bridge
