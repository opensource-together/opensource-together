// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl-arm64-openssl-3.0.x"]
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id                String                 @id @default(uuid())
  username          String                 @unique
  email             String                 @unique
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  githubCredentials UserGitHubCredentials?
  profile           Profile?
}

model Profile {
  userId                 String                   @id @unique
  name                   String
  login                  String
  avatarUrl              String?
  location               String?
  company                String?
  bio                    String?
  updatedAt              DateTime                 @default(now()) @updatedAt
  user                   User?                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  socialLinks            UserSocialLink[]
  projects               Project[]
  projectRoleApplication ProjectRoleApplication[]
}

model UserGitHubCredentials {
  user              User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String   @id @unique
  githubAccessToken String?
  githubUserId      String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Project {
  id                     String                   @id @default(uuid())
  ownerId                String
  title                  String
  description            String
  shortDescription       String // ADDED
  externalLinks          ProjectExternalLink[]
  createdAt              DateTime                 @default(now()) // RENAMED
  updatedAt              DateTime                 @updatedAt
  techStacks             TechStack[]
  projectMembers         teamMember[]
  projectRoles           ProjectRole[]
  categories             Category[]
  keyFeatures            KeyFeature[]
  projectGoals           ProjectGoal[]
  projectRoleApplication ProjectRoleApplication[]
  profile                Profile?                 @relation(fields: [profileId], references: [userId], onDelete: Cascade)
  profileId              String?
  image                  String?

  // Index composite pour recherche + tri par date
  @@index([createdAt(sort: Desc)], name: "idx_project_date")
  // Index pour recherche textuelle sur le titre
  @@index([title], name: "idx_title_search")
}

model ProjectExternalLink {
  id        String  @id @default(uuid())
  projectId String
  type      String
  url       String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

enum TechStackType {
  LANGUAGE
  TECH
}

model TechStack {
  id           String        @id @default(uuid())
  name         String
  iconUrl      String
  type         TechStackType
  projects     Project[]
  projectRoles ProjectRole[]
}

model teamMember {
  id          String        @id @default(uuid())
  userId      String
  projectId   String
  joinedAt    DateTime      @default(now())
  projectRole ProjectRole[]
  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model ProjectRole {
  id                     String                   @id @default(uuid())
  projectId              String
  title                  String // RENAMED
  techStacks             TechStack[] // RENAMED
  description            String
  isFilled               Boolean
  teamMember             teamMember[]
  project                Project                  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  projectRoleApplication ProjectRoleApplication[]

  // Index pour recherche par projet et rôle
  @@index([projectId, title], name: "idx_project_roles") // UPDATED
}

model ProjectRoleApplication {
  id                   String      @id @default(uuid())
  projectId            String
  projectRoleId        String
  projectRoleTitle     String
  status               String
  motivationLetter     String?
  selectedKeyFeatures  String[]
  selectedProjectGoals String[]
  rejectionReason      String?
  appliedAt            DateTime    @default(now())
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  projectRole          ProjectRole @relation(fields: [projectRoleId], references: [id], onDelete: Cascade)
  profile              Profile     @relation(fields: [profileId], references: [userId], onDelete: Cascade)
  profileId            String
  project              Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model UserSocialLink {
  id        String   @id @default(uuid())
  userId    String
  type      String // ex: "github", "twitter", "linkedin", "website"
  url       String
  createdAt DateTime @default(now())

  // Relation
  profile Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)

  // Un utilisateur ne peut avoir qu'un seul lien d'un type donné.
  @@unique([userId, type])
}

model Category {
  id       String    @id @default(uuid())
  name     String
  projects Project[]
}

model KeyFeature {
  id        String  @id @default(uuid())
  projectId String
  feature   String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model ProjectGoal {
  id        String  @id @default(uuid())
  projectId String
  goal      String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}
